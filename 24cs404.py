# -*- coding: utf-8 -*-
"""24cs404

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YfRbsTayXH06EcEIfER1a2BLPCnMgccn

Numpy programs
"""

import numpy as np
a=np.array([1,2,3,4,5])
b=np.array([10,20,30,40,50])
sum_array=a+b
diff_array=b-a
product_array=a*b
mean_a=np.mean(a)
max_b=np.max(b)
min_b=np.min(b)
print("Array a:",a)
print("Array b:",b)
print("Sum:",sum_array)
print("Difference:",diff_array)
print("Product:",product_array)
print("mean of a:",mean_a)
print("Max of b:",max_b)
print("Min of b:",min_b)

import numpy as np
arr=np.array([[1,2,3],[4,5,6]])
print("element at(0,1):",arr[0,1])
print("second row:",arr[1])
print(arr)

a=np.array([5,10,15])
b=np.array([1,2,3])
result=a+b
print("sum:",result)

import numpy as np
rand_array=np.random.randint(1,100,size=10)
print("Random Array:",rand_array)
print("maxmimum:",np.max(rand_array))
print("minimum:",np.min(rand_array))

import numpy as np
arr=np.array([1,2,3,4,5,6])
rashaped=arr.reshape(2,3)
print("Reshaped (4*3) :\n",rashaped)
flattened=rashaped.flatten()
print("Flattened:",flattened)

import numpy as np
arr=np.array([10,20,30,40,50,60])
filtered=arr[arr>25]
print("Element>25:",filtered)

arr=np.array([1,2,3,4,5,6])
A=np.array([[1,2],[3,4]])
B=np.array([[5,6],[7,8]])
result=np.dot(A,B)
print("matrix a:\n",A)
print("matrix b:\n",B)
print("result:\n",result)

data=np.array([1,2,3,4,5,6])
print("mean:",np.mean(data))
print("median:",np.median(data))
print("standard deviation:",np.std(data))

a=np.arange(0,10)
b=np.linspace(0,2*np.pi,10)
print("a:",a)
print("b:",b)

import numpy as np
matrix=np.array([[1,2,3],[4,5,6]])
transpose=matrix.T
print("original:\n",matrix)
print("Transposed:\n",transpose)

import numpy as np
x=np.array([0,np.pi/2,np.pi])
y=np.sin(x)
print("x values:",x)
print("sin(x):",y)

import pandas as pd
data={
    'name':['Alice','Bob','Charlie'],
    'age':[25,30,35],
    'score':[85,90,95]
     }
df=pd.DataFrame(data)
print(df)

import pandas as pd
df=pd.read_csv('/content/STUDENT.csv')
print(df.head())
print(df.tail())
print(df.info())
print(df.describe())

import pandas as pd
data={
    'name':['Asha','ravi','neha'],
    'age':[25,39,36]
}
df=pd.DataFrame(data)
filtered_df=df[df['age']>25]
print(filtered_df)

import pandas as pd
data={
    'department':['CS','CS','IT','IT'],
    'marks':[80,90,75,85]
}
df=pd.DataFrame(data)
grouped=df.groupby('department').mean()
print(grouped)

import pandas as pd
data={
    'math':[90,80,85],
    'science':[85,90,80]
}
df=pd.DataFrame(data)
df['total']=df['math']+df['science']/2
print(df)
df.to_csv("averages.csv",index=False)

import matplotlib.pyplot as plt
x=[1,2,3,4,5]
y=[10,12,15,18,20]
plt.plot(x,y)
plt.title("simple line graph")
plt.xlabel("x values")
plt.ylabel("y values")
plt.show()

import matplotlib.pyplot as plt
students=['Asha','Ravi','neha']
scores=[85,90,95]
plt.bar(students,scores,color='skyblue')
plt.title("Students Score")
plt.xlabel("Students")
plt.ylabel("Scores")
plt.show()

import matplotlib.pyplot as plt
labels=['Python','java','c++','c']
sizes=[40,25,20,15]
plt.pie(sizes,labels=labels,autopct='%1.1f%%',startangle=140)
plt.title("Programming Languages usage")
plt.axis('equal')
plt.show()

import matplotlib.pyplot as plt
ages=[18,22,21,25,30,27,25,22,19]
plt.hist(ages,bins=5,color='pink')
plt.title("Age Distribution")
plt.xlabel("Age")
plt.ylabel("Frequency")
plt.show()

import matplotlib.pyplot as plt
x=[1,2,3,4,5]
y=[5,6,7,8,10]
plt.scatter(x,y,color='red')
plt.title("Scatter Plot Example")
plt.xlabel("x values")
plt.ylabel("y values")
plt.show()

"""LAMBDA PROGRAMS"""

add=lambda x,y:x+y
print(add(5,3))

square=lambda x:x**2
print(square(4))

numbers=[1,2,3,4,5,6]
even_numbers=list(filter(lambda x:x%2==0,numbers))
print(even_numbers)

data=[(1,'apple'),(3,'banana'),(2,'cherry')]
sorted_data=sorted(data,key=lambda x:x[1])
print(sorted_data)

multiply=lambda x,y,z:x*y*z
print(multiply(2,3,4))

numbers=[1,2,3,4,5]
doubled=list(map(lambda x:x*2,numbers))
print(doubled)

numbers=[10,15,20,25,30]
oddes=list(filter(lambda x:x%2!=0,numbers))
print(oddes)

student=[
    {"name":"alice","score":85},
    {"name":"bob","score":92},
    {"name":"charlie","score":78}
]
sorted_students=sorted(student,key=lambda student:student['score'])
print(sorted_students)

check_even=lambda x:"even" if x%2==0 else "odd"
print(check_even(4))
print(check_even(5))

from functools import reduce
numbers=[1,2,3,4]
product=reduce(lambda x,y:x*y,numbers)
print(product)

names=["JHONE","DOE","ALICE"]
capitalized=list(map(lambda name:name.capitalize(),names))
print(capitalized)

emails=["alice@example","bob@test.com"]
domains=list(map(lambda email:email.split("@")[1],emails))
print(domains)

numbers=[2,4,6,8]
all_even=all(map(lambda x:x%2==0,numbers))
print(all_even)
any_gt_5=any(map(lambda x:x>5,numbers))
print(any_gt_5)

words=["apple","banana","cherry","fig"]
sorted_words=sorted(words,key=len)
print(sorted_words)

sentence="lambd functions are powreful"
reversed_word=list(map(lambda word:word[::-1],sentence.split()))
print("".join(reversed_word))

people=["alice jhon","bob smith","charlie brown"]
sorted_by_last=sorted(people,key=lambda name:name.split()[-1])
print(sorted_by_last)

operations={
    'add':lambda x,y:x+y,
    'sub':lambda x,y:x-y,
    'mul':lambda x,y:x*y,
    'div':lambda x,y:x/y if y!=0 else'error'
}
print(operations['add'](10,5))
print(operations['div'](10,0))

numbers=list(range(1,21))
filtered=list(filter(lambda x:x%2==0 and x%3==0,numbers))
print(filtered)

check_even_odd=lambda num:"even" if num%2==0 else "odd"
print(check_even_odd(4))
print(check_even_odd(5))

s1='Geeks for Geeks'
s2=lambda func:func.upper()
print(s2(s1))

n=lambda x:"positive" if x>0 else "nagative" if x<0 else "zero"
print((n)(5))
print((n)(-3))
print((n)(0))

li=[lambda arg=x:arg for x in range(1,5)]
for i in li:
  print(i())

check=lambda x:"Even" if x%2==0 else "odd"
print(check(4))
print(check(7))

calc=lambda x,y:(x+y,x*y)
res=calc(3,4)
print(res)

n=[1,2,3,4,5,6]
even=filter(lambda x:x%2==0,n)
print(list(even))

a=[1,2,3,4]
b=reduce(lambda x,y:x*y,a)
print(b)

a=[1,2,3,4]
b=map(lambda x:x*2,a)
print(list(b))

"""PANDAS"""

import pandas as pd
ds1=pd.Series([2,4,8,10])
ds2=pd.Series([1,3,7,9])
print("multiply two series:")
ds=ds1*ds2
print(ds)
print("divide series 1 by series 2 :")
ds=ds1/ds2
print(ds)

import pandas as pd
ds1=pd.Series([2,4,8,10])
ds2=pd.Series([1,3,7,9])
print("multiply two series:")
ds=ds1*ds2
print(ds)
print("divide series 1 by series 2 :")
ds=ds1/ds2
print(ds)

import pandas as pd
d1={'a':100,'b':200,'c':300,'d':400,'e':800}
print("original dictionary:")
print(d1)
new_series=pd.Series(d1)
print("converted series:")
print(new_series)

import pandas as pd
s=pd.Series([400,300.12,100,200])
print("original data series:")
print(s)
new_s=pd.Series(s).sort_values()
print(new_s)

import pandas as pd
s=pd.Series(data=[1,2,3],index=['A','B','C'])
print("original data series:")
print(s)
s=s.reindex(index=['B','A','C'])
print("Data series after changing the order of index:")
print(s)

import pandas as pd
import numpy as np
sr1=pd.Series([1,2,3])
sr2=pd.Series([2,3,6])
print("original series:")
print("sr1:")
print(sr1)
print("sr2:")
print(sr2)
print("\n items of given series not present in another given series:")
sr11=pd.Series(np.union1d(sr1,sr2))
sr22=pd.Series(np.intersect1d(sr1,sr2))
result=sr11[~sr11.isin(sr22)]
print(result)

import pandas as pd
import numpy as np
exam_data={'name':['Manish','Dhiraj'],'Score':[12.5,9]}
labels=['NAME','SCORE']
df=pd.DataFrame(exam_data,index=labels)
print(df)

import pandas as pd
import numpy as np
exam_data={'name':['manish','dhiraj','man','dhir'],
           'score':[12.5,91,2.5,9]}
df=pd.DataFrame(exam_data)
print("First three rows of the data from:")
print(df.iloc[:3])

import pandas as pd
import numpy as np
exam_data={'name':['manish','dhiraj','man','dhir'],
           'score':[12.5,91,2.5,9]}
df=pd.DataFrame(exam_data)
total_rows=len(df.axes[0])
total_cols=len(df.axes[1])
print("Number of rows:"+str(total_rows))
print("Number of columns:"+str(total_cols))

import pandas as pd
import numpy as np
exam_data={'name':['manish','dhiraj','man','dhir'],
           'score':[12.5,91,2.5,9]}
df=pd.DataFrame(exam_data)
print("Rows where score between 15 and 20(inclusive):")
print(df[df['score'].between(15,20)])

import pandas as pd
import numpy as np
exam_data={'name':['manish','dhiraj','man','dhir'],
           'score':[12.5,91,2.5,9]}
df=pd.DataFrame(exam_data)
result_sort=df.sort_values(by=['name','score'],ascending=[True,True])
print("Sort the dataFrame first by 'name' in descending order then by 'score' in ascending order:")
print(result_sort)

import pandas as pd
import numpy as np
exam_data={'name':['manish','dhiraj','man','dhir'],
           'score':[12.5,91,20.5,19]}
df=pd.DataFrame(exam_data)
df['name']=df['name'].replace('manish','anish')
print(df)

import pandas as pd
import numpy as np
exam_data={'name':['Manish','Dhiraj','Man','Dhir'],
           'score':[12.5,91,20.5,19]}
df=pd.DataFrame(exam_data)
df=df[df.score>=20]
print("new DataFrame")
print(df)

import pandas as pd
import numpy as np
s1=pd.Series(['100','200','400'])
s2=pd.Series(['10','20','40'])
df=pd.concat([s1,s2], axis=1)
print("Value of Row4")
print(df.iloc[2])

import pandas as pd
import numpy as np
s1=pd.Series(['100','200','400'])
s2=pd.Series(['10','20','40'])
df=pd.concat([s1,s2], axis=1)
new_col=(1,2,3)
idx=0
df.insert(loc=idx,column='1',value=new_col)
print("\n New DataFrame")
print(df)

import pandas as pd
import numpy as np
exam_data={'Name':['Manish','Dhiraj','Man','Dhir'],
          'Score':[12.5,91,20.5,19]}
df=pd.DataFrame(exam_data)
df=df.rename(columns={'Name':'NAME','Score':'SCORE'})
print("New dataFrame after renameing columns:")
print(df)

import pandas as pd
import numpy as np
s1=pd.Series(['100','200','400'])
s2=pd.Series(['10','20','40'])
print(s1)
print(s2)
df=pd.concat([s1,s2],axis=1)
print("New DataFrame combining two Series:")
print(df)

import pandas as pd
s=pd.Series([5,10,15,20,25])
print(s)

import pandas as pd
s=pd.Series([5,10,15,20,25],
index=['a','b','c','d','e'])

import pandas as pd
s=pd.Series([5,10,15,20,25],index=['a','b','c','d','e'])
print(s['c'])
print(s['a'])
print(s['e'])

import pandas as pd
s=pd.Series([5,10,15,20,25])
print(s.max())
print(s.min())
print(s.mean())
print(s.std())

"""SERIES"""

import pandas as pd
s=pd.Series([5,10,15,20,25])
print(s+5)

import pandas as pd
fruits=pd.Series({'apple':50,'banana':30,'cherry':20})
print(fruits)

import pandas as pd
fruits=pd.Series({'apple':50,'banana':30,'cherry':20})
print(fruits[fruits>25])

import pandas as pd
fruits=pd.Series({'apple':50,'banana':30,'cherry':20})
print(fruits*1.2)

import pandas as pd
fruits=pd.Series({'apple':50,'banana':30,'cherry':20})
new_fruits=pd.Series({'banana':10,'cherry':5,'date':15})
combined=fruits+new_fruits
print(combined)

import pandas as pd
s=pd.Series([5,10,15,20,25])
print("Mean:",s.mean())
print("Standard Deviation:",s.std)

import pandas as pd
Maths=pd.Series({'Ashwini':85,'Bhagya':90,'soumya':78})
English=pd.Series({'Ashwini':88,'Bhagya':95,'soumya':91})
total=Maths+English
print(total)

import pandas as pd
datas=pd.Series(pd.to_datetime(['2023-1-15','2023-4-22','2023-2-10']))
months=datas.dt.month
print(months)

import pandas as pd
s=pd.Series([10,50,30,70,40],
index=['a','b','c','d','e'])
print(s.idxmax())

"""DATAFRAME USING PANDAS"""

import pandas as pd
data = {
    'Name': ['Rupa', 'Sita', 'Geeta'],
    'Age': [25, 30, 35],
    'City': ['Bagalkot', 'Solapur', 'Gulbarga']
}

df = pd.DataFrame(data)
print(df)

import pandas as pd
df = pd.DataFrame({
    'Name': ['Rupa', 'Sita', 'Geeta'],
    'Age': [25, 30, 35],
    'City': ['Bagalkot', 'Solapur', 'Gulbarga']
})
df_sorted = df.sort_values(by='Age', ascending=False)
print(df_sorted)

import pandas as pd
df = pd.DataFrame({
    'Name': ['Rupa', 'Sita', 'Geeta'],
    'Age': [25, 30, 35],
    'City': ['Bagalkot', 'Solapur', 'Gulbarga']
})
df['Salary'] = [50000, 60000, 70000]
print(df)

import pandas as pd
df = pd.DataFrame({
    'Name': ['Rupa', 'Sita', 'Geeta'],
    'Age': [25, 30, 35],
    'City': ['Bagalkot', 'Solapur', 'Gulbarga']
})
age_above_30 = df[df['Age'] > 30]
print(age_above_30)

import pandas as pd
df=pd.DataFrame(data)
data={
    'Name':['Rupa','Sita','Geeta'],
    'Age':[25,30,35],
    'City':['Bagalkot','Solapur','Gulbarga']
}
df.loc[df['Name']=='Sita','City']='Bagalkot'
print(df)

import pandas as pd
df=pd.DataFrame(data)
data={
    'Name':['Rupa','Sita','Geeta'],
    'Age':[25,30,35],
    'City':['Bagalkot','Solapur','Gulbarga']
}
df_no_city=df.drop(columns='City')
print(df_no_city)

import pandas as pd
df=pd.DataFrame(data)
data={
    'Name':['Rupa','Sita','Geeta'],
    'Age':[25,30,35],
    'City':['Bagalkot','Solapur','Gulbarga']
}
average_age=df['Age'].mean()
print("Average Age:",average_age)

import pandas as pd
df=pd.DataFrame(data)
data={
    'Name':['Rupa','Sita','Geeta'],
    'Age':[25,30,35],
    'City':['Bagalkot','Solapur','Gulbarga']
}
is_bagalkot_present='Bagalkot' in df['City'].values
print("Is anyone from Bagalkot?:",is_bagalkot_present)

import pandas as pd
df=pd.DataFrame(data)
data={
    'Name':['Rupa','Sita','Geeta'],
    'Age':[25,30,35],
    'City':['Bagalkot','Solapur','Gulbarga']
}
Sita_info=df[df['Name']=='Sita']
print(Sita_info)

import pandas as pd
df=pd.DataFrame(data)
data={
    'Name':['Rupa','Sita','Geeta'],
    'Age':[25,30,35],
    'City':['Bagalkot','Solapur','Gulbarga']
}
City_counts=df['City'].value_counts()
print(City_counts)

import pandas as pd

data={
    'Name':['Rupa','Sita','Geeta'],
    'Age':[25,30,35],
    'City':['Bagalkot','Solapur','Gulbarga'],
    'Salary':[50000,60000,70000]
}
df=pd.DataFrame(data)

max_Salary=df[df['Salary']==df['Salary'].max()]
print(max_Salary)

"""NUMPY"""

import numpy as np
arr=np.array([1,2,3,4,5])
print(arr.sum())
print(arr.mean())
print(arr.min())
print(arr.max())

import numpy as np
import random
array = np.random.randint(16,size=(4,4))
print("Input Array: \n",array)
# largest element of the x and y axis
print("largest number in x axis: ",np.min(array,axis=1))
print("largest number in y axis: ",np.min(array,axis=0))

import numpy as np
import random
array = np.random.randint(16,size=(4,4))
print("Input Array: \n",array)
# Smallest element of the x and y axis
print("Smallest number in x axis: ",np.min(array,axis=1))
print("Smallest number in y axis: ",np.min(array,axis=0))
print(array.std())

arr = np.array([1, 2, 3])
print(arr + 2)
print(np.sin(arr))

arr = np.array([1, 2, 3])
arr2 = np.array([1, 2, 3])
print(arr + arr2)

squared = list(map(lambda x: x**2, arr))
print("Squared using map:", squared)

def square(number):
  return number*number
nums= [1,2,3,4]
squared_numbers = list(map(square,nums))
print(squared_numbers)
# Using lambda function
nums1= [1,2,3,4,5,6]
squareOfnums1 = list(map(lambda n:n*n,nums1))
print(squareOfnums1)

def is_even(n):
  if n%2==0:
    return True
  else:
    return False
nums=[1,2,3,4]
evens=list(filter(is_even,nums))
print(evens)

even=list(filter(lambda n:n%2==0,nums))
print(even)

from functools import reduce
def sum_all(a,b):
  return a+b
nums=[1,2,3,4]
sum=reduce(sum_all,nums)
print(sum)

from functools import reduce
nums=[1,2,3,4]
total=reduce(lambda x,y:x+y,nums)
print("Sum using reduce:",total)

nums=[1,2,3,4]
evens=filter(lambda n:n%2==0,nums)
print(list(evens))

import pandas as pd
data=pd.Series([10,20,30,40],
          index=['a','b','c','d'])
print("sum using reduce:",total)

import pandas as pd
data={'name':['Alice','Bob','Charlie'],
      'Age':[25,30,35],
      'City':['Delhi','Mumbai','Bangalor']
      }
df=pd.DataFrame(data)
print(df)

df=pd.read_csv('/content/STUDENT.csv')
df.to_csv('output.csv',index=False)

import pandas as pd
list=['Apple','Mango','Banana','Pineapple','Grapes','Watermelon']
df=pd.DataFrame(list)
print(df)

import pandas as pd
data={'Name':['Tom','Nick','Krish','Jack'],
      'Age':[20,21,19,18]
      }
df=pd.DataFrame(data)
print(df)

import pandas as pd
data={
    'Department':['HR','HR','IT','IT','Finance','Finance'],
    'Employee':['Alice','Bob','Charlie','David','Eve','Frank'],
    'Salary':[50000,55000,60000,65000,70000,75000],
    'Age':[25,30,28,32,40,38]
}
df=pd.DataFrame(data)
print(df)
print(df['Salary'].mean())
print(df['Age'].max())
grouped=df.groupby('Department')['Salary'].mean()
print(grouped)
df['Location']=['Mumbai','Delhi','Mumbai','Delhi','Mumbai','Delhi']
grouped=df.groupby(['Department','Location'])['Salary'].mean()
print(grouped)
result=df.groupby('Department').agg({'Salary':'mean',
          'Age':['min','max']})
print(result)

import pandas as pd
d1={"Name":["pankaja","Lisa","David"],
    "ID":[1,2,3],
    "Role":["CEO","Editor","Author"]}
df=pd.DataFrame(d1)
print(df)
df_melted=pd.melt(df,id_vars=["ID"],value_vars=["Name","Role"])
print(df_melted)

import pandas as pd
data={
    'Date':['2024-01-01','2024-01-01','2024-01-02','2024-01-02'],
    'City':['Mumbai','Delhi','Mumbai','Delhi'],
    'Temperature':[33,28,34,27]
}
df=pd.DataFrame(data)
print("Original:\n",df)
pivoted=df.pivot(index='Date',columns='City',values='Temperature')
print("\nPivoted:\n",pivoted)

import pandas as pd
data={
    'Student':['Alice','Bob','Charlie'],
    'math':[85,90,78],
    'Science':[92,88,85],
    'english':[75,80,72]
}
df=pd.DataFrame(data)
print("original wide DataFrame:\n",df)
melted_df=pd.melt(df,id_vars=['Student'],
             var_name='Subject',
             value_name='Marks')
print("\nMelted DataFrame:\n",melted_df)

import pandas as pd
import numpy as np
dates=pd.date_range(start='2024-01-01',periods=10,freq='D')
ts=pd.Series(np.random.randint(100,200,size=10),index=dates)
print(ts)

import pandas as pd
df=pd.DataFrame({'date':['2024-01-01','2024-01-02','2024-01-03'],
                 'value':[120,135,150]})
df['Date']=pd.to_datetime(df['date'])
df=df.set_index('Date',inplace=True)
print(ts['2024-01-04'])
print(ts['2024-01-03':'2024-01-07'])
print(ts['2024-01'])

import pandas as pd
import numpy as np
from functools import reduce
df=pd.DataFrame({'Name':['Alice','Bob','Charlie','david'],
                 'Age':[25,32,30,29],
                 'Salary':[50000,60000,55000,52000]})
print(df)
df['updated_salary']=df['Salary'].apply(lambda x:x*1.10)
df['Age_Group']=df['Age'].apply(lambda x:'Young' if x<30 else 'Adult')
df['Name_upper']=df['Name'].map(lambda x:x.upper())
salary_levels={50000:'Low',55000:'Medium',60000:'High'}
df['Salary_Level']=df['Salary'].map(salary_levels)
filtered_df=df[df['Salary']>5200]
filtered_df=df[df['Name'].apply(lambda x:x.startswith('A'))]
from functools import reduce
df['Name_Age']=df.apply(lambda row:reduce(lambda a,b: str(a) +'_'+str(b),[row['Name'],row['Age']]),axis=1)

import pandas as pd
import numpy as np
from functools import reduce
df=pd.DataFrame({'Name':['Alice','Bob','Charlie','david'],
                 'Age':[25,32,30,29],
                 'Salary':[50000,60000,55000,52000]})
print(df)
df['updated_salary']=df['Salary'].apply(lambda x:x*1.10)
df['Age_Group']=df['Age'].apply(lambda x:'Young' if x<30 else 'Adult')
df['Name_upper']=df['Name'].map(lambda x:x.upper())
salary_levels={50000:'Low',55000:'Medium',60000:'High'}
df['Salary_Level']=df['Salary'].map(salary_levels)
filtered_df=df[df['Salary']>5200]
filtered_df=df[df['Name'].apply(lambda x:x.startswith('A'))]
from functools import reduce
df['Name_Age']=df.apply(lambda row:reduce(lambda a,b: str(a) +'_'+str(b),[row['Name'],row['Age']]),axis=1)

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
amounts = [25, 50, 30]
# Create a bar chart
plt.bar(categories, amounts)
# Adding labels
plt.xlabel('Categories')
plt.ylabel('Amounts')
plt.title('Bar Chart of Amounts by Category')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
amounts = [25, 50, 30]
# Create a pie chart
plt.pie(amounts, labels=categories, autopct='%1.1f%%')
# Adding a title
plt.title('Pie Chart of Amounts by Category')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data
years = [2010, 2011, 2012, 2013, 2014]
amounts = [100, 120, 140, 110, 150]
# Create a line chart
plt.plot(years, amounts, marker='o', linestyle='-')
# Adding labels and a title
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Line Chart of Amounts Over Time')
# Show the plot
plt.grid(True) # Add a grid for better readability
plt.show()

import matplotlib.pyplot as plt
# Sample data
x = [10, 20, 30, 40, 50]
y = [50, 40, 30, 20, 10]
# Create a scatter plot
plt.scatter(x, y)
# Adding labels and a title
plt.xlabel('X-Axis')
plt.ylabel('Y-Axis')
plt.title('Scatter Plot of X vs. Y')
# Show the plot
plt.grid(True) # Add a grid for better readability
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate random data for demonstration
data = np.random.randn(1000) # Replace with your dataset
# Create a histogram
plt.hist(data, bins=20, edgecolor='k')
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of Data')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate random data following a normal distribution
mu, sigma = 0, 1
data = np.random.normal(mu, sigma, 1000)
# Create a histogram
plt.hist(data, bins=30, edgecolor='k', alpha=0.7)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of a Normal Distribution')
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate random data following a uniform distribution
low, high = 0, 10
data = np.random.uniform(low, high, 1000)
# Create a histogram
plt.hist(data, bins=20, edgecolor='k', alpha=0.7)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of a Uniform Distribution')
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate random data following an exponential distribution
scale = 1.0
data = np.random.exponential(scale, 1000)
# Create a histogram
plt.hist(data, bins=20, edgecolor='k', alpha=0.7)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of an Exponential Distribution')
# Show the plot
plt.grid(True)
plt.show()

import seaborn as sns
import numpy as np
# Generate random data following a normal distribution
mu, sigma = 0, 1
data = np.random.normal(mu, sigma, 1000)
# Create a KDE plot
sns.kdeplot(data, shade=True)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Density')
plt.title('Kernel Density Estimation (KDE) Plot of a Normal Distribution')
# Show the plot
plt.show()

import seaborn as sns
# Generate random data for two different distributions
data1 = np.random.normal(0, 1, 1000)
data2 = np.random.normal(2, 1, 1000)
# Create a box plot to compare the two distributions
sns.boxplot(data=[data1, data2])
# Adding labels and a title
plt.xlabel('Distribution')
plt.ylabel('Value')
plt.title('Box Plot Comparison of Two Distributions')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data representing proportions
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a pie chart
plt.pie(proportions, labels=categories, autopct='%1.1f%%')
# Adding a title
plt.title('Pie Chart of Proportions')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data representing proportions for multiple categories
categories = ['Category A', 'Category B', 'Category C']
proportions1 = [0.2, 0.4, 0.1]
proportions2 = [0.3, 0.2, 0.4]
# Create a stacked bar chart
plt.bar(categories, proportions1, label='Group 1')
plt.bar(categories, proportions2, bottom=proportions1, label='Group 2')
# Adding labels and a legend
plt.xlabel('Categories')
plt.ylabel('Proportions')
plt.title('Stacked Bar Chart of Proportions')
plt.legend()
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data representing proportions
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a horizontal bar chart
plt.barh(categories, proportions)
# Adding labels and a title
plt.xlabel('Proportions')
plt.ylabel('Categories')
plt.title('Horizontal Bar Chart of Proportions')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Sample data representing proportions over time
years = [2010, 2011, 2012, 2013, 2014]
proportions1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5])
proportions2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6])
# Create a stacked area chart
plt.stackplot(years, proportions1, proportions2, labels=['Group 1', 'Group \
2'], alpha=0.5)
# Adding labels and a legend
plt.xlabel('Year')
plt.ylabel('Proportions')
plt.title('Stacked Area Chart of Proportions Over Time')
plt.legend(loc='upper left')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate sample data for two variables with a positive association
x = np.random.rand(100)
y = 2 * x + np.random.rand(100)
# Create a scatter plot
plt.scatter(x, y)
# Adding labels and a title
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Scatter Plot for Bivariate Association')
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate sample time series data
time = np.arange(0, 10, 0.1)
data = np.sin(time)
# Create a line plot
plt.plot(time, data)
# Adding labels and a title
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('Line Plot for Time Series Data')
# Show the plot
plt.grid(True)
plt.show()

import seaborn as sns
import numpy as np
# Generate a random correlation matrix
corr_matrix = np.corrcoef(np.random.rand(5, 5))
# Create a heatmap
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True)
# Adding a title
plt.title('Heatmap of Correlation Matrix')
# Show the plot
plt.show()

import seaborn as sns
# Load a sample dataset with multiple variables
data = sns.load_dataset("iris")
# Create a pair plot to visualize associations between variables
sns.pairplot(data, hue="species")
# Adding a title
plt.suptitle('Pair Plot of Iris Dataset', y=1.02)
# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
# Load a sample dataset with categorical and numeric variables
data = sns.load_dataset("tips")
# Create a box plot to visualize the association between a categorical
# variable and a numeric variable
sns.boxplot(x="day", y="total_bill", data=data)
# Adding labels and a title
plt.xlabel('Day of the Week')
plt.ylabel('Total Bill Amount')
plt.title('Box Plot of Total Bill Amount by Day')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
# Generate a sample time series dataset
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
time_series_data = np.random.randn(len(date_rng))
# Create a time series DataFrame
time_series_df = pd.DataFrame(time_series_data, index=date_rng,
columns=['Value'])
# Create a line plot
plt.figure(figsize=(12, 6))
plt.plot(time_series_df.index, time_series_df['Value'])
# Adding labels and a title
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Line Plot of Time Series Data')
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
# Generate a sample time series dataset
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
time_series_data = np.random.randn(len(date_rng)).cumsum()
# Create a time series DataFrame
time_series_df = pd.DataFrame(time_series_data, index=date_rng,
columns=['Cumulative Value'])
# Create an area plot
plt.figure(figsize=(12, 6))
plt.fill_between(time_series_df.index, time_series_df['Cumulative Value'],
color='skyblue')
# Adding labels and a title
plt.xlabel('Date')
plt.ylabel('Cumulative Value')
plt.title('Area Plot of Cumulative Time Series Data')
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
# Generate a sample multivariate time series dataset
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
data = {
 'Value1': np.random.randn(len(date_rng)),
 'Value2': np.random.randn(len(date_rng))
}
# Create a time series DataFrame
time_series_df = pd.DataFrame(data, index=date_rng)
# Create multiple line plots on the same axis
plt.figure(figsize=(12, 6))
plt.plot(time_series_df.index, time_series_df['Value1'], label='Value1')
plt.plot(time_series_df.index, time_series_df['Value2'], label='Value2')
# Adding labels, a legend, and a title
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Multiple Line Plots of Multivariate Time Series Data')
plt.legend()
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
from statsmodels.tsa.seasonal import seasonal_decompose
import numpy as np
# Generate a sample time series dataset with seasonality
date_rng = pd.date_range(start='2022-01-01', periods=730, freq='D')
seasonality = np.sin(2 * np.pi * date_rng.dayofyear / 365)
time_series_data = np.random.randn(len(date_rng)) + 0.2 * seasonality
# Create a time series DataFrame
time_series_df = pd.DataFrame(time_series_data, index=date_rng,
columns=['Value'])
# Decompose the time series into trend, seasonal, and residual components
result = seasonal_decompose(time_series_df['Value'], model='additive',
period=365)
# Plot the decomposed components
plt.figure(figsize=(12, 8))
plt.subplot(411)
plt.plot(time_series_df.index, result.observed, label='Observed')
plt.ylabel('Observed')
plt.title('Seasonal Decomposition of Time Series Data')
plt.subplot(412)
plt.plot(time_series_df.index, result.trend, label='Trend')
plt.ylabel('Trend')
plt.subplot(413)
plt.plot(time_series_df.index, result.seasonal, label='Seasonal')
plt.ylabel('Seasonal')
plt.subplot(414)
plt.plot(time_series_df.index, result.resid, label='Residual')
plt.ylabel('Residual')
plt.xlabel('Date')
plt.tight_layout()
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
# Sample data
data = {'Date': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04'], 'Value': [10, 15, 8, 12]}
df = pd.DataFrame(data)
df['Date'] = pd.to_datetime(df['Date']) # Convert Date column to datetime
# Create a line plot
plt.figure(figsize=(10, 6))
plt.plot(df['Date'], df['Value'], marker='o', linestyle='-')
plt.title('Trend Over Time')
plt.xlabel('Date')
plt.ylabel('Value')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
sales = [500, 750, 600]
# Create a bar chart
plt.figure(figsize=(8, 6))
plt.bar(categories, sales, color='skyblue')
plt.title('Sales by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate sample data
np.random.seed(0)
age = np.random.randint(18, 65, 50)
income = 30000 + 1500 * age + np.random.normal(0, 10000, 50)
# Create a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(age, income, alpha=0.6)
plt.title('Age vs. Income')
plt.xlabel('Age')
plt.ylabel('Income')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate sample data
np.random.seed(0)
scores = np.random.normal(70, 10, 100)
# Create a histogram
plt.figure(figsize=(8, 6))
plt.hist(scores, bins=20, edgecolor='k')
plt.title('Exam Score Distribution')
plt.xlabel('Score')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

import seaborn as sns
import pandas as pd
# Sample data
data = sns.load_dataset('iris')
# Create a pair plot
sns.set(style="ticks")
sns.pairplot(data, hue="species")
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Sample data
x = np.linspace(0, 10, 100)
y = np.sin(x)
confidence_interval = 0.1 * np.sin(x)
# Create a line plot with confidence intervals
plt.figure(figsize=(10, 6))
plt.plot(x, y, label='Mean', color='b')
plt.fill_between(x, y - confidence_interval, y + confidence_interval, alpha=0.2, color='g',
label='Confidence Interval')
plt.title('Line Plot with Confidence Intervals')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Sample data
x = np.arange(1, 6)
y = np.array([2.5, 4.0, 3.5, 5.0, 4.8])
y_error = np.array([0.2, 0.3, 0.1, 0.4, 0.15])
# Create a scatter plot with error bars
plt.figure(figsize=(8, 6))
plt.errorbar(x, y, yerr=y_error, fmt='o', capsize=5, color='b', label='Data with Error Bars')
plt.title('Scatter Plot with Error Bars')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Sample data with multiple distributions
data = [np.random.normal(0, 1, 100), np.random.normal(3, 1, 100), np.random.normal(7, 2, 100)]
# Create a box plot
plt.figure(figsize=(8, 6))
plt.boxplot(data, vert=False, labels=['A', 'B', 'C'])
plt.title('Box Plot of Data Distributions')
plt.xlabel('Value')
plt.grid(True)
plt.show()

import seaborn as sns
import numpy as np
# Generate sample data
data = np.random.normal(0, 1, 1000)
# Create a KDE plot
sns.set_style('whitegrid')
plt.figure(figsize=(8, 6))
sns.kdeplot(data, shade=True)
plt.title('Kernel Density Estimation (KDE) Plot')
plt.xlabel('Value')
plt.ylabel('Density')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
# Sample data
data = {'CarType': ['Sedan', 'SUV', 'Truck', 'Hatchback', 'Sedan'],
 'Frequency': [25, 15, 10, 20, 30]}
df = pd.DataFrame(data)
# Create a bar plot
plt.figure(figsize=(8, 6))
plt.bar(df['CarType'], df['Frequency'], color='skyblue')
plt.title('Distribution of Car Types')
plt.xlabel('Car Type')
plt.ylabel('Frequency')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
# Sample data
data = {'Month': ['Jan', 'Feb', 'Mar', 'Apr'],
 'Product_A': [100, 120, 80, 90],
 'Product_B': [80, 90, 110, 100],
 'Product_C': [70, 95, 85, 75]}
df = pd.DataFrame(data)
# Create a grouped bar plot
plt.figure(figsize=(10, 6))
bar_width = 0.2
index = df.index
plt.bar(index - bar_width, df['Product_A'], bar_width, label='Product A')
plt.bar(index, df['Product_B'], bar_width, label='Product B')
plt.bar(index + bar_width, df['Product_C'], bar_width, label='Product C')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.title('Monthly Sales Comparison')
plt.xticks(index, df['Month'])
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a pie chart
plt.figure(figsize=(8, 6))
plt.pie(proportions, labels=categories, autopct='%1.1f%%', startangle=90, colors=['lightcoral',
'lightskyblue', 'lightgreen'])
plt.title('Category Proportions')
plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

import seaborn as sns
# Sample data
data = sns.load_dataset('tips')
# Create a box plot
sns.set(style='whitegrid')
plt.figure(figsize=(8, 6))
sns.boxplot(x='day', y='total_bill', data=data, palette='Set2')
plt.title('Box Plot of Total Bill Amount by Day')
plt.xlabel('Day of the Week')
plt.ylabel('Total Bill Amount ($)')
plt.show()

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a pie chart
plt.figure(figsize=(8, 6))
plt.pie(proportions, labels=categories, autopct='%1.1f%%', startangle=90, colors=['lightcoral',
'lightskyblue', 'lightgreen'])
plt.title('Category Proportions')
plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a bar chart
plt.figure(figsize=(8, 6))
plt.bar(categories, proportions, color=['lightcoral', 'lightskyblue', 'lightgreen'])
plt.title('Category Proportions')
plt.xlabel('Category')
plt.ylabel('Proportion')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
subcategories = ['Subcategory 1', 'Subcategory 2', 'Subcategory 3']
proportions = [[0.2, 0.1, 0.1], [0.1, 0.2, 0.0], [0.1, 0.0, 0.2]]
# Create a stacked bar chart
plt.figure(figsize=(10, 6))
bottom = [0] * len(subcategories)
colors = ['lightcoral', 'lightskyblue', 'lightgreen']
for i, category in enumerate(categories):
 plt.bar(subcategories, proportions[i], label=category, bottom=bottom, color=colors[i])
 bottom = [sum(x) for x in zip(bottom, proportions[i])]
plt.title('Proportions in Subcategories by Category')
plt.xlabel('Subcategory')
plt.ylabel('Proportion')
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
# Sample data
data = {'Date': ['2023-01-01', '2023-01-02', '2023-01-03'],
 'Category_A': [0.4, 0.3, 0.5],
 'Category_B': [0.3, 0.4, 0.2],
 'Category_C': [0.3, 0.3, 0.3]}
df = pd.DataFrame(data)
df['Date'] = pd.to_datetime(df['Date'])
# Create a stacked area chart
plt.figure(figsize=(10, 6))
plt.stackplot(df['Date'], df['Category_A'], df['Category_B'], df['Category_C'], labels=['Category A',
'Category B', 'Category C'], alpha=0.7)
plt.title('Stacked Area Chart of Proportions Over Time')
plt.xlabel('Date')
plt.ylabel('Proportion')
plt.legend(loc='upper left')
plt.grid(True)
plt.show()

